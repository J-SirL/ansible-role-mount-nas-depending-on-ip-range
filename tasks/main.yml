# tasks/main.yml

# Ensure the log directory and file exists
- name: Ensure /var/log directory exists
  ansible.builtin.file:
    path: /var/log
    state: directory
    mode: '0755'

- name: Ensure /var/log/nas_mount.log exists and has correct permissions
  ansible.builtin.file:
    path: /var/log/nas_mount.log
    state: touch
    mode: '0666'

# Remove old script to ensure that there is no faulty settings

- name: Find existing NetworkManager dispatcher scripts
  ansible.builtin.find:
    paths: /etc/NetworkManager/dispatcher.d/
    patterns: '99-trigger-nas-mount*'
  register: found_dispatcher_scripts

- name: Remove found NetworkManager dispatcher scripts
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ found_dispatcher_scripts.files }}"
  when: found_dispatcher_scripts.matched > 0

- name: Remove existing NAS mount script
  ansible.builtin.file:
    path: "{{ script_path }}"
    state: absent

- name: Disable existing NAS mount service
  ansible.builtin.systemd:
    name: "{{ service_name }}"
    enabled: no
    state: stopped
  failed_when: false
  ignore_errors: true

- name: Reload systemd to apply changes
  ansible.builtin.systemd:
    daemon_reload: yes



# Following tasks to upload new scripts and configurations

- name: Upload NAS mount script
  ansible.builtin.template:
    src: mount_nas_check_type.sh.j2
    dest: "{{ script_path }}"
    mode: '0755'

- name: Create a systemd service file for the script
  ansible.builtin.template:
    src: nas_mount_service.j2
    dest: "/etc/systemd/system/{{ service_name }}.service"
    mode: '0644'
  notify:
    - Reload systemd
    - Start nas_mount service

- name: Create NetworkManager dispatcher script to trigger the service
  ansible.builtin.template:
    src: network_dispatcher_script.j2
    dest: "{{ network_dispatcher_script }}"
    mode: '0755'
  notify:
    - Reload NetworkManager

# Adding status checks

- name: Check if NAS mount script exists
  ansible.builtin.stat:
    path: "{{ script_path }}"
  register: nas_mount_script_status

- name: Debug NAS mount script status
  ansible.builtin.debug:
    msg: "NAS mount script exists: {{ nas_mount_script_status.stat.exists }}"

- name: Check if systemd service file exists
  ansible.builtin.stat:
    path: "/etc/systemd/system/{{ service_name }}.service"
  register: nas_mount_service_status

- name: Debug systemd service file status
  ansible.builtin.debug:
    msg: "Systemd service file exists: {{ nas_mount_service_status.stat.exists }}"

- name: Check if NAS mount service is active
  ansible.builtin.systemd:
    name: "{{ service_name }}"
    state: started
  register: nas_mount_service_check
  failed_when: false
  ignore_errors: true

- name: Debug NAS mount service status
  ansible.builtin.debug:
    msg: "NAS mount service is active: {{ nas_mount_service_check.status.ActiveState == 'active' }}"

- name: Check if NetworkManager dispatcher script exists
  ansible.builtin.stat:
    path: "{{ network_dispatcher_script }}"
  register: network_dispatcher_script_status

- name: Debug NetworkManager dispatcher script status
  ansible.builtin.debug:
    msg: "NetworkManager dispatcher script exists: {{ network_dispatcher_script_status.stat.exists }}"